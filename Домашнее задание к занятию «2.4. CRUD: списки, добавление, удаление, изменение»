<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <EditText
        android:id="@+id/post_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Введите текст поста"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <androidx.constraintlayout.widget.Group
        android:id="@+id/undo_group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <Button
            android:id="@+id/undo_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Отменить"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <Button
            android:id="@+id/redo_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Повторить"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toStartOf="@+id/undo_button" />
    </androidx.constraintlayout.widget.Group>

</androidx.constraintlayout.widget.ConstraintLayout>



class PostViewModel : ViewModel() {

    private val _isUndoGroupVisible = MutableLiveData(false)
    val isUndoGroupVisible: LiveData<Boolean> = _isUndoGroupVisible

    fun onTextChanged(text: String) {
        _isUndoGroupVisible.value = text.isNotEmpty()
    }

    fun onUndoClicked() {
        // Логика отмены редактирования
    }

    fun onRedoClicked() {
        // Логика повтора редактирования
    }
}



class PostFragment : Fragment() {

    private val viewModel: PostViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_post, container, false)

        val postInput = view.findViewById<EditText>(R.id.post_input)
        val undoGroup = view.findViewById<ViewGroup>(R.id.undo_group)
        val undoButton = view.findViewById<Button>(R.id.undo_button)
        val redoButton = view.findViewById<Button>(R.id.redo_button)

        viewModel.isUndoGroupVisible.observe(viewLifecycleOwner) { isVisible ->
            undoGroup.visibility = if (isVisible) View.VISIBLE else View.GONE
        }

        postInput.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.onTextChanged(s.toString())
            }
            override fun afterTextChanged(s: Editable?) {}
        })

        undoButton.setOnClickListener {
            viewModel.onUndoClicked()
        }

        redoButton.setOnClickListener {
            viewModel.onRedoClicked()
        }

        return view
    }
}
